plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'org.sonarqube' version '4.4.1.3373'
	id 'jacoco'
}

apply plugin: 'application'
apply plugin: "jacoco"

group = 'com.ascenda'
version = '0.0.1'

java {
	sourceCompatibility = '17'
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java']
		}
		resources {
			srcDirs = ['src/main/resources']
		}
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.h2database:h2'
	implementation 'org.languagetool:language-en:6.3'
	implementation("com.github.ben-manes.caffeine:caffeine:3.0.4")
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
	testImplementation 'org.assertj:assertj-core:3.24.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine'
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testImplementation 'org.junit.jupiter:junit-jupiter-params'
	testImplementation 'org.mockito:mockito-core:3.4.0'
	testImplementation 'org.mockito:mockito-inline:3.4.0'
}

tasks.named('test') {
	useJUnitPlatform()
}


jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.required = true
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}
}

sonarqube {
	properties {
		property "sonar.projectKey", "myproject"
		property "sonar.host.url", "http://localhost:9000"
		property "sonar.login", "admin"
		property "sonar.password", "admin"


		property "sonar.junit.reportPaths", "build/test-logs/test-*.xml"
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
	}
}

